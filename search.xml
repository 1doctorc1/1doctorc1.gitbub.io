<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python</title>
      <link href="2021/02/05/python/"/>
      <url>2021/02/05/python/</url>
      
        <content type="html"><![CDATA[<h1 id="pycharm安装、配置和使用指南"><a href="#pycharm安装、配置和使用指南" class="headerlink" title="pycharm安装、配置和使用指南"></a>pycharm安装、配置和使用指南</h1><p>terminal：终端</p><p>administrator：管理员用户</p><p>new scratch file:创建新的暂存文件</p><p>plugin:插件</p><p>External Libraries:外部库</p><p><u><strong>pycharm运行py文件快捷键：ctrl+shift+F10</strong></u></p><p>setting</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""作者：$&amp;#123;USER&amp;#125;日期：$&amp;#123;YEAR&amp;#125;年$&amp;#123;MONTH&amp;#125;月$&amp;#123;DAY&amp;#125;日"""</span><span class="token comment" spellcheck="true">#""""""指字符串</span><span class="token comment" spellcheck="true">#$(美元符)+&amp;#123;&amp;#125;指变量</span></code></pre><h1 id="python基础知识学习"><a href="#python基础知识学习" class="headerlink" title="python基础知识学习"></a>python基础知识学习</h1><h2 id="1-原始数据类型和运算符"><a href="#1-原始数据类型和运算符" class="headerlink" title="1.  原始数据类型和运算符"></a>1.  原始数据类型和运算符</h2><ol><li>除法：自动转为浮点数</li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">35</span><span class="token operator">/</span><span class="token number">5</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># => 7.0</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token operator">/</span><span class="token number">5</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># => 7.2</span></code></pre><ol start="2"><li>整数除法(//)：结果向下取整</li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">35</span><span class="token operator">//</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># => 7</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token operator">//</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># => 7</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">36.0</span><span class="token operator">//</span><span class="token number">5.0</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># => 7.0</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token operator">//</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># => -2</span></code></pre><ol start="3"><li><p>x的y次方：2**4=16</p></li><li><p>用not给布尔值取非：</p></li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">not</span> <span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># => False</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">not</span> <span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># => True</span><span class="token comment" spellcheck="true">#print(not TRUE)    #报错，True和False严格区分大小写</span></code></pre><ol start="5"><li>逻辑运算符and和or(与和或)，and和or均为小写，严格区分大小写</li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token boolean">True</span> <span class="token operator">and</span> <span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># => False</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token boolean">False</span> <span class="token operator">or</span> <span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># => True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token boolean">True</span> <span class="token operator">and</span> <span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># => True</span></code></pre><ol start="6"><li>大小比较连起来</li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">></span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># => False</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token number">4</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># => True</span><span class="token comment" spellcheck="true">#并不是逐个比较，即2>3得False(0),0&lt;1结果应为True</span><span class="token comment" spellcheck="true">#而是同时对左右进行比较：3&lt;4为True，4>1为True，所以结果为True</span></code></pre><ol start="7"><li>字符串可以用单引号或者双引号</li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'i am 字符串'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"i am 字符串"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#两种方法都可以，一般情况下使用双引号</span></code></pre><ol start="8"><li>用加号连接字符串，类似于java</li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello "</span><span class="token operator">+</span><span class="token string">"python"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># => hello python</span></code></pre><ol start="9"><li><strong>字符串可以当作字符数组来访问数组元素</strong></li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"this is a new problem"</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># => i</span><span class="token comment" spellcheck="true">#print("this is a new problem"[2][3][5]) #输出结果并不为isi，报错信息为string index out of range，推测可能被当作多维数组</span><span class="token comment" spellcheck="true">#以下情况倒是可以</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"this"</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"is"</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"my"</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># => iim</span></code></pre><p>10.<strong><u>用.format来格式化字符串</u></strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&amp;#123;&amp;#125; can be &amp;#123;&amp;#125;"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"strings"</span><span class="token punctuation">,</span><span class="token string">"interpolated"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    # <span class="token operator">=</span><span class="token operator">></span> strings can be interpolated<span class="token comment" spellcheck="true">#interpolated:插入，以内插值替换的</span><span class="token comment" spellcheck="true">#格式：   "字符串&amp;#123;待格式化内容&amp;#125;".format("格式化内容")</span><span class="token comment" spellcheck="true">#不加控制符号为逐个替换</span></code></pre><ol start="11"><li><p>可以使用重复参数节省时间(添加控制符)</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&amp;#123;0&amp;#125; is a real foolguys , but &amp;#123;0&amp;#125; is pretty funny , &amp;#123;1&amp;#125; ,oh i don't konw"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># => a is a real foolguys , but a is pretty funny , b ,oh i don't konw</span><span class="token comment" spellcheck="true">#&amp;#123;0&amp;#125;被替换成format的第一个字符串参数</span><span class="token comment" spellcheck="true">#&amp;#123;1&amp;#125;被替换为format的第二个字符串参数</span></code></pre></li><li><p>也可以用类似于微信小程序的关键字数据绑定</p></li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&amp;#123;name&amp;#125; just want to say it's too long"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"i"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># => i just want to say it's too long</span><span class="token comment" spellcheck="true">#老式格式化语法类似于C中的scanf，仅作了解</span></code></pre><ol start="13"><li><p>None</p><p>None是一个对象</p></li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#print(none)        #此语句将导致后面无法输出</span><span class="token keyword">print</span><span class="token punctuation">(</span>None<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># =>None</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"etc"</span> <span class="token keyword">is</span> None<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#False</span><span class="token keyword">print</span><span class="token punctuation">(</span>None <span class="token keyword">is</span> None<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#True</span></code></pre><ol start="14"><li>特殊的布尔判断</li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>bool<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#False</span><span class="token keyword">print</span><span class="token punctuation">(</span>bool<span class="token punctuation">(</span>None<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#False</span><span class="token keyword">print</span><span class="token punctuation">(</span>bool<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;))        #False    空列表</span><span class="token keyword">print</span><span class="token punctuation">(</span>bool<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#False    空字典？</span><span class="token comment" spellcheck="true">#所有其他值都是True</span></code></pre><h2 id="2-变量和集合"><a href="#2-变量和集合" class="headerlink" title="2.变量和集合"></a>2.变量和集合</h2><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ol><li>在给变量赋值前不用提前声明</li><li>用列表(list)储存序列</li></ol><pre class=" language-python"><code class="language-python">li<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#创建列表</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># => 1   ##像访问数组一样访问列表元素</span></code></pre><ol start="3"><li>用append在列表最后追加元素/用pop从列表尾部删除/直接取出列表最后一个元素</li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#续上</span>li<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#此时li列表元素为[1,2,4,5],即自动在末尾加</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#可以直接访问这个新加入的元素</span>li<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#中间没有参数是直接删除最后一个，此时li列表元素为[1,2,4]</span><span class="token comment" spellcheck="true">#print(li[3])    #报错：list index out of range</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#无论列表长度为多少，直接取出最后一个元素</span></code></pre><h3 id="列表的切割语法"><a href="#列表的切割语法" class="headerlink" title="列表的切割语法"></a>列表的切割语法</h3><p>可以用三个参数的任何组合来构成切割：list[始：终：步伐]</p><p>步伐省略默认为1，即逐个访问</p><p>两种理解方式：</p><p>0-1存储第一个元素，1-2存储第二个元素</p><p>始终按数组形式从0开始，这种方式不访问终坐标的元素</p><pre class=" language-python"><code class="language-python">li<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># => [1]    #注意输出的元素带[]</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># => [4]</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># => [2,4]</span><span class="token comment" spellcheck="true">#取尾</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># => [1,2]</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># => [1,2]</span><span class="token comment" spellcheck="true">#取头</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># => [4,3]</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># => [4,3]</span><span class="token comment" spellcheck="true">#逐个取/隔一个取一个</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#[1,2,4,3]</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#[1,4]</span><span class="token comment" spellcheck="true">#倒序取</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#[3,4,2,1]</span></code></pre><h3 id="列表2"><a href="#列表2" class="headerlink" title="列表2"></a>列表2</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#用del删除任何一个元素</span>list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#定义并初始化列表</span><span class="token keyword">del</span> list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#用del删除任何一个元素</span><span class="token keyword">del</span> list<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#用del删除最后一个元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#[2,4]</span>                <span class="token comment" spellcheck="true">#不像C++不能直接输出非字符数组</span><span class="token comment" spellcheck="true">#列表可以相加，并且相加的原列表值不变</span><span class="token comment" spellcheck="true">#续上</span>list2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token operator">+</span>list2<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># => [2,4,6,5,7]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>list<span class="token operator">+</span>list2<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># => 4                #访问拼接后的单个元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># => [2,4]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># => [6,5,7]</span><span class="token comment" spellcheck="true">#用extend拼接列表</span>list<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>list2<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># =>[2,4,6,5,7]</span><span class="token comment" spellcheck="true">#用in测试列表是否包含某个值 格式：要测试是否包含的值+in+列表名</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">in</span> list<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># => False    #list中并没有1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token keyword">in</span> list<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># => True    #list中有2</span><span class="token comment" spellcheck="true">#用len获取列表长度</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># => 5 </span></code></pre><h3 id="元组-tuple"><a href="#元组-tuple" class="headerlink" title="元组(tuple)"></a>元组(tuple)</h3><p>元组是不可改变的序列</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#元组特殊的地方</span>tup1<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#用括号初始化和定义</span><span class="token keyword">print</span><span class="token punctuation">(</span>tup1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># => 2    像列表一样用[]访问元素</span><span class="token comment" spellcheck="true">#tup1[2]=4            #    尝试修改元组元素，报错：'tuple' object does not support item assignment(元组对象不支持项目分配)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tup1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># => 3</span><span class="token comment" spellcheck="true">#元组可以进行大部分列表的操作</span><span class="token comment" spellcheck="true">#tup1.append(1)        #报错：'tuple' object has no attribute 'append'，tuple对象没有append属性，同理没有pop()</span><span class="token comment" spellcheck="true">#取出最后一个元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>tup1<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># => 3</span><span class="token comment" spellcheck="true">#切割取法(注意有点不一样)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tup1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># => (2,)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># => [4]</span><span class="token keyword">print</span><span class="token punctuation">(</span>tup1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># => (1,2)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tup1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># => (1,2,3)</span><span class="token comment" spellcheck="true">#相加/拼接/包含/取长度</span><span class="token keyword">print</span><span class="token punctuation">(</span>tup1<span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># => (1,2,3,3,5,6)</span>tup1<span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#元组无法改变，包括拼接，只能通过拼接改变输出</span><span class="token keyword">print</span><span class="token punctuation">(</span>tup1<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># => (1,2,3)</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>tup1<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># => (3)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token keyword">in</span> tup1<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># => False</span><span class="token comment" spellcheck="true">#元组特殊的地方</span><span class="token comment" spellcheck="true">#可以把元组和列表解包，赋给变量</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># => 1 2 3</span>d<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># => 4 5 6</span><span class="token comment" spellcheck="true">#print中逗号，被当作分隔符，输出的数字被转为中间为空格</span><span class="token comment" spellcheck="true">#元组周围的括号可以省略</span>d<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># => 7 8 9</span><span class="token comment" spellcheck="true">#！！！</span><span class="token comment" spellcheck="true">#交换两个变量的值</span>a<span class="token operator">=</span>bb<span class="token operator">=</span>a<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># => 2 2</span><span class="token comment" spellcheck="true">#同时进行改变，不需要中间变量</span>d<span class="token punctuation">,</span>e<span class="token operator">=</span>e<span class="token punctuation">,</span>d<span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># => 8 7 9</span><span class="token comment" spellcheck="true">#！！！</span></code></pre><h3 id="字典-dict-dictionary"><a href="#字典-dict-dictionary" class="headerlink" title="字典(dict)dictionary"></a>字典(dict)dictionary</h3><p>特别注意：keys和列表的结合</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#空字典</span>empty_dict<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span><span class="token comment" spellcheck="true">#初始化字典</span><span class="token comment" spellcheck="true">#filled_dict=&amp;#123;"one"=1,"two"=2,"three"=3&amp;#125;    #报错：invalid syntax 无效语法</span><span class="token comment" spellcheck="true">#正确的赋值方式是“键值对”的形式</span>filled_dict<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"one":1,"two":2,"three":3&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>filled_dict<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># => &amp;#123;'one': 1, 'two': 2, 'three': 3&amp;#125;</span><span class="token comment" spellcheck="true">#访问字典元素</span><span class="token comment" spellcheck="true">#print(filled_dict[1])        #报错：keyerror</span><span class="token keyword">print</span><span class="token punctuation">(</span>filled_dict<span class="token punctuation">[</span><span class="token string">"one"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># => 1</span><span class="token comment" spellcheck="true">#字典中的keys</span><span class="token comment" spellcheck="true">#用keys获得字典中所有的键(没有值)</span>another_dictionary<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"four":4&amp;#125;        </span><span class="token keyword">print</span><span class="token punctuation">(</span>another_dictionary<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># => dict_keys(["four"])</span><span class="token keyword">print</span><span class="token punctuation">(</span>filled_dict<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># => dict_keys(["one","two","three"])</span><span class="token comment" spellcheck="true">#用keys返回一个“可迭代”的对象，所以可以把结果放在一个list中</span>filled_dict<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"one":1,"two":2,"three":3&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>filled_dict<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># => ["one","two","three"]</span><span class="token comment" spellcheck="true">#用values获得所有的值(没有键)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>filled_dict<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># => [1,2,3]</span><span class="token comment" spellcheck="true">#用in测试一个字典中是否包含某个键</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"one"</span> <span class="token keyword">in</span> filled_dict<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># => True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">in</span> filled_dict<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># => False</span><span class="token comment" spellcheck="true">#仅能判断键，所有的值都会判断为False</span><span class="token comment" spellcheck="true">#回顾字典访问元素的方式</span><span class="token keyword">print</span><span class="token punctuation">(</span>filled_dict<span class="token punctuation">[</span><span class="token string">"one"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># => 1</span></code></pre><h3 id="字典2"><a href="#字典2" class="headerlink" title="字典2"></a>字典2</h3><ol><li>访问不存在的键</li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>filled_dict<span class="token punctuation">[</span><span class="token string">"four"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#报错：keyerror</span></code></pre><ol start="2"><li>用get访问字典元素,可以避免keyerror</li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>filled_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># => 1</span><span class="token keyword">print</span><span class="token punctuation">(</span>filled_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"four"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># => None，返回空对象</span></code></pre><ol start="3"><li>带两个参数的get访问</li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>filled_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># => 1</span><span class="token comment" spellcheck="true">#字典中存在访问可访问的的键，则返回其对应的值</span><span class="token keyword">print</span><span class="token punctuation">(</span>filled_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"four"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># => 5</span><span class="token comment" spellcheck="true">#字典中不存在可访问的键，将第二个参数作为默认值输出</span></code></pre><ol start="4"><li>用setdefault在只有当键不存在的时候插入新值</li></ol><pre class=" language-python"><code class="language-python">other_dict<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">"sun"</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span>        other_dict<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">"sun"</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>other_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"sun"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># => 7</span><span class="token keyword">print</span><span class="token punctuation">(</span>other_dict<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># => dict_keys(['mon', 'tue', 'wedn', 'sun'])</span><span class="token comment" spellcheck="true">#1.只有第一次设置才有效</span><span class="token comment" spellcheck="true">#2.会将这个键值对插入到字典里</span></code></pre><ol start="5"><li>用del删除键值对</li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#other_dict.del("mon")报错</span><span class="token comment" spellcheck="true">#del other_dict("mon")报错</span><span class="token keyword">del</span> other_dict<span class="token punctuation">[</span><span class="token string">"mon"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>other_dict<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># => &amp;#123;'tue': 2, 'wedn': 3, 'sun': 7&amp;#125;</span></code></pre><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><ol><li>集合即数学意义上的数的集合，包括其特点</li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#集合基础</span>empty_set<span class="token operator">=</span>set<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#用set表达集合</span>some_set<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;1,1,2,3,4,4&amp;#125;    #集合的初始化方法</span>var_set<span class="token operator">=</span>some_set        <span class="token comment" spellcheck="true">#把集合作为一个整体赋给变量</span><span class="token keyword">print</span><span class="token punctuation">(</span>some_set<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># => &amp;#123;1,2,3,4&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>empty_set<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># => set()</span><span class="token keyword">print</span><span class="token punctuation">(</span>var_set<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># => &amp;#123;1,2,3,4&amp;#125;</span><span class="token comment" spellcheck="true">#集合运算</span><span class="token comment" spellcheck="true">#&amp;取交集</span><span class="token comment" spellcheck="true">#|取并集</span><span class="token comment" spellcheck="true">##-取补集##</span>other_set<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;2,4,5&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>some_set<span class="token operator">&amp;</span>other_set<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># => &amp;#123;2,4&amp;#125;</span>third_set<span class="token operator">=</span>some_set<span class="token operator">|</span>other_set    <span class="token keyword">print</span><span class="token punctuation">(</span>third_set<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># => &amp;#123;1,2,3,4,5&amp;#125;</span><span class="token comment" spellcheck="true">#这里取补集是双目运算符，可以当成减</span><span class="token keyword">print</span><span class="token punctuation">(</span>some_set<span class="token operator">-</span>other_set<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># => &amp;#123;1,3&amp;#125;</span><span class="token comment" spellcheck="true">#集合包含in</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token keyword">in</span> some_set<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># => True</span></code></pre><h2 id="3-流程控制和迭代器"><a href="#3-流程控制和迭代器" class="headerlink" title="3. 流程控制和迭代器"></a>3. 流程控制和迭代器</h2><h3 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#不需要加括号，但是注意缩进会影响代码</span><span class="token comment" spellcheck="true">#if、else、elif(else+if)后跟的语句要加冒号:</span><span class="token comment" spellcheck="true">#1</span>some_var<span class="token operator">=</span><span class="token number">5</span><span class="token keyword">if</span> some_var<span class="token operator">>=</span><span class="token number">10</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"some_var大于等于10"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"some_var小于10"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># => some_var大于等于10</span><span class="token comment" spellcheck="true">#2</span><span class="token comment" spellcheck="true">#elif后记得加判断条件</span><span class="token keyword">if</span> some_var<span class="token operator">></span><span class="token number">10</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"some_var大于10"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> some_var<span class="token operator">==</span><span class="token number">10</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"some_var等于10"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"some_var小于10"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># => some_var小于10</span></code></pre><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#字符串循环</span><span class="token keyword">for</span> animal <span class="token keyword">in</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"dog","cat","mouse"&amp;#125;:        #for 迭代的对象 in &amp;#123;&amp;#125;/[]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&amp;#123;&amp;#125; is a animal"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">)</span>        #自动格式化，但是为什么自动从dog到mouse呢<span class="token triple-quoted-string string">""" =>dog is a animalcat is a animalmouse is a animal"""</span><span class="token comment" spellcheck="true">#数字循环    关键字range，返回数字列表从0到给的数字</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""自动换行0123"""</span></code></pre><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><pre class=" language-python"><code class="language-python">x<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">while</span> x<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    x<span class="token operator">+=</span><span class="token number">1</span><span class="token comment" spellcheck="true">#while冒号后的都处在while循环里</span><span class="token triple-quoted-string string">"""0123"""</span></code></pre><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>用try/except块处理异常情况</p><pre class=" language-python"><code class="language-python"></code></pre><h3 id="迭代与迭代器"><a href="#迭代与迭代器" class="headerlink" title="迭代与迭代器"></a>迭代与迭代器</h3><p><strong><u>Python提供一个叫做可迭代（iterable）的基本抽象。一个可迭代对象是可以被当作序列的对象。比如说上面range返回的对象就是可迭代的</u></strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#my_iterable是一个实现可迭代接口的对象</span>filled_dict<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"one":1,"two":2,"three":3&amp;#125;</span>my_iterable<span class="token operator">=</span>filled_dict<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_iterable<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># => dict_keys(["one","two","three"])</span><span class="token comment" spellcheck="true">#可迭代对象可以遍历</span><span class="token keyword">for</span> i <span class="token keyword">in</span> my_iterable<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""onetwothree"""</span><span class="token comment" spellcheck="true">#但是可迭代对象不可以随机访问</span><span class="token comment" spellcheck="true">#print(my_iterable[1])，会导致后面的错误输出</span><span class="token comment" spellcheck="true">#可迭代对象与迭代器</span><span class="token comment" spellcheck="true">#可迭代对象生成迭代器，关键字iter</span>my_iterable<span class="token operator">=</span>iter<span class="token punctuation">(</span>my_iterable<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#迭代器是一个可以记住遍历位置的对象</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_iterable<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># => one</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_iterable<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># => two</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_iterable<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># => three </span><span class="token comment" spellcheck="true">#print(my_iterable.__next__())    # 抛出StopIteration</span><span class="token comment" spellcheck="true">#可以用list一次去除迭代器所有的元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>filled_dict<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># => ['one', 'two', 'three']</span></code></pre><h2 id="4-函数"><a href="#4-函数" class="headerlink" title="4. 函数"></a>4. 函数</h2><h3 id="用def定义新函数"><a href="#用def定义新函数" class="headerlink" title="用def定义新函数"></a>用def定义新函数</h3><h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">exchange</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"before change a=&amp;#123;&amp;#125;,b=&amp;#123;&amp;#125;"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"after change a=&amp;#123;&amp;#125;,b=&amp;#123;&amp;#125;"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>bsum<span class="token operator">=</span>exchange<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""before change a=5,b=10after change a=10,b=515"""</span></code></pre><h3 id="用关键字参数调用函数"><a href="#用关键字参数调用函数" class="headerlink" title="用关键字参数调用函数"></a>用关键字参数调用函数</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#关键字参数可以用任意顺序</span><span class="token keyword">def</span> <span class="token function">exchange</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"before change a=&amp;#123;&amp;#125;,b=&amp;#123;&amp;#125;"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"after change a=&amp;#123;&amp;#125;,b=&amp;#123;&amp;#125;"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> anew_a<span class="token operator">=</span>exchange<span class="token punctuation">(</span>b<span class="token operator">=</span><span class="token number">13</span><span class="token punctuation">,</span>a<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>new_a<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""before change a=7,b=13after change a=13,b=77"""</span></code></pre><h3 id="形参与实参！！！区别于C"><a href="#形参与实参！！！区别于C" class="headerlink" title="形参与实参！！！区别于C++"></a>形参与实参！！！区别于C++</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">changevalues</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>    a<span class="token punctuation">,</span>b<span class="token operator">=</span>b<span class="token punctuation">,</span>a    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>    <span class="token keyword">return</span> anew_a<span class="token operator">=</span>changevalues<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>new_a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#形参可以影响实参</span><span class="token triple-quoted-string string">"""11 77 117"""</span></code></pre><h3 id="可变参数函数与关键字可变参数函数"><a href="#可变参数函数与关键字可变参数函数" class="headerlink" title="可变参数函数与关键字可变参数函数"></a>可变参数函数与关键字可变参数函数</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#*args,args是参数，那么*是代表可变参数吗？</span><span class="token comment" spellcheck="true">#(1,2,3)是一个元组，作为参数传递</span><span class="token keyword">def</span> <span class="token function">varargs</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> args<span class="token keyword">print</span><span class="token punctuation">(</span>varargs<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># => (1, 2, 3)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#args和kwargs某种程度上是固定的</span><span class="token comment" spellcheck="true">#kwargs并不是某种类型的变量，只是关键字对应</span><span class="token keyword">def</span> <span class="token function">keyword_args</span><span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> kwargs<span class="token keyword">print</span><span class="token punctuation">(</span>keyword_args<span class="token punctuation">(</span>big<span class="token operator">=</span><span class="token string">"foot"</span><span class="token punctuation">,</span>loch<span class="token operator">=</span><span class="token string">"ness"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># => &amp;#123;'big': 'foot', 'loch': 'ness'&amp;#125;</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#两种可变参数同时作为函数参数</span><span class="token keyword">def</span> <span class="token function">all_the_args</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>all_the_args<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""(1, 2)&amp;#123;'a': 3, 'b': 4&amp;#125;None"""</span></code></pre><p>*<em><u>调用可变参数函数时可以做跟上面相反的，用</em>展开序列，用两个展开字典</u>**</p><p>推测类似于C++地址传递中传递指针与传递对象的区别</p><p>为什么和上面的关键字可变函数不一样，这里是字典</p><pre class=" language-python"><code class="language-python">kwargs<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"one":1,"two":2,"five":5&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>all_the_args<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>all_the_args<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>all_the_args<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""(1, 2, 3)&amp;#123;'one': 1, 'two': 2, 'five': 5&amp;#125;None"""</span><span class="token comment" spellcheck="true"># => 最后一句错误输出？</span></code></pre><h3 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h3><pre class=" language-python"><code class="language-python">x<span class="token operator">=</span><span class="token number">5</span><span class="token keyword">def</span> <span class="token function">setX</span><span class="token punctuation">(</span>some_num<span class="token punctuation">)</span><span class="token punctuation">:</span>    x<span class="token operator">=</span>some_num    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">setglobalX</span><span class="token punctuation">(</span>other_num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> x    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    x<span class="token operator">=</span>other_num    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>setX<span class="token punctuation">(</span><span class="token number">43</span><span class="token punctuation">)</span>setglobalX<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""4351313"""</span></code></pre><h3 id="函数的嵌套使用-分部传参"><a href="#函数的嵌套使用-分部传参" class="headerlink" title="函数的嵌套使用(分部传参)"></a>函数的嵌套使用(分部传参)</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">creat_adder</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">adder</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> x<span class="token operator">+</span>y    <span class="token keyword">return</span> adderadd_10<span class="token operator">=</span>creat_adder<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>add_10<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># => 13</span></code></pre><h3 id="匿名函数lambda"><a href="#匿名函数lambda" class="headerlink" title="匿名函数lambda"></a>匿名函数lambda</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># => True</span></code></pre><h3 id="内置的高阶函数？？？"><a href="#内置的高阶函数？？？" class="headerlink" title="内置的高阶函数？？？"></a>内置的高阶函数？？？</h3><pre class=" language-python"><code class="language-python">map<span class="token punctuation">(</span>add_10<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># => [11, 12, 13]</span>filter<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># => [6, 7]</span></code></pre><h2 id="5-类"><a href="#5-类" class="headerlink" title="5.类"></a>5.类</h2><p>创建一个类合理的缩进形式</p><p><img src="C:\Users\张驰\AppData\Roaming\Typora\typora-user-images\image-20210203090308836.png" alt="image-20210203090308836"></p><h3 id="定义类和类属性"><a href="#定义类和类属性" class="headerlink" title="定义类和类属性"></a>定义类和类属性</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Human</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    species<span class="token operator">=</span><span class="token string">"H.sapiens"</span><span class="token comment" spellcheck="true">#类属性即可以被所有类的实例共用的属性</span></code></pre><h3 id="类实例的初始化-构造"><a href="#类实例的初始化-构造" class="headerlink" title="类实例的初始化(构造)"></a>类实例的初始化(构造)</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#定义方式，注意名字前后的双下划线</span><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>name<span class="token operator">=</span>name</code></pre><h3 id="类实例的方法"><a href="#类实例的方法" class="headerlink" title="类实例的方法"></a>类实例的方法</h3><p>第一个参数总是self，就是这个实例对象？？？</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">say</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"&amp;#123;name&amp;#125;:&amp;#123;message&amp;#125;"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>name<span class="token operator">=</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>message<span class="token operator">=</span>msg<span class="token punctuation">)</span></code></pre><h3 id="类方法-成员函数？"><a href="#类方法-成员函数？" class="headerlink" title="类方法(成员函数？)"></a>类方法(成员函数？)</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#被此类实例共用，第一个参数是这个类对象</span>@classmethod<span class="token keyword">def</span> <span class="token function">get_species</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> cls<span class="token punctuation">.</span>species</code></pre><h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><p>调用时没有实例或类的绑定</p><pre class=" language-python"><code class="language-python">@staticmethod<span class="token keyword">def</span> <span class="token function">grunt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"grunt"</span></code></pre><p><strong>python的语法缩进影响构成</strong></p><h2 id="构造类的实例"><a href="#构造类的实例" class="headerlink" title="构造类的实例"></a>构造类的实例</h2><pre class=" language-python"><code class="language-python">i<span class="token operator">=</span>Human<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"Ian"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>say<span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>j<span class="token operator">=</span>Human<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"joel"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">.</span>say<span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="调用一个类方法"><a href="#调用一个类方法" class="headerlink" title="调用一个类方法"></a>调用一个类方法</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>get_species<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="改一个共用的类属性"><a href="#改一个共用的类属性" class="headerlink" title="改一个共用的类属性"></a>改一个共用的类属性</h2><pre class=" language-python"><code class="language-python">Human<span class="token punctuation">.</span>species<span class="token operator">=</span><span class="token string">"H.neanderthalesis"</span><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>get_species<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">.</span>get_species<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="调用静态方法"><a href="#调用静态方法" class="headerlink" title="调用静态方法"></a>调用静态方法</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>Human<span class="token punctuation">.</span>grunt<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h1 id="6-模板"><a href="#6-模板" class="headerlink" title="6.模板"></a>6.模板</h1><h2 id="用import导入模板"><a href="#用import导入模板" class="headerlink" title="用import导入模板"></a>用import导入模板</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> math<span class="token keyword">print</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="也可以从模块中导入个别值"><a href="#也可以从模块中导入个别值" class="headerlink" title="也可以从模块中导入个别值"></a>也可以从模块中导入个别值</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> math <span class="token keyword">import</span> ceil<span class="token punctuation">,</span>floor<span class="token keyword">print</span><span class="token punctuation">(</span>ceil<span class="token punctuation">(</span><span class="token number">3.7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># => 4</span><span class="token keyword">print</span><span class="token punctuation">(</span>floor<span class="token punctuation">(</span><span class="token number">3.7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># => 3</span></code></pre><h2 id="可以导入一个模块中所有的值"><a href="#可以导入一个模块中所有的值" class="headerlink" title="可以导入一个模块中所有的值"></a>可以导入一个模块中所有的值</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> math <span class="token keyword">import</span> <span class="token operator">*</span></code></pre><h2 id="快捷使用模块-缩写模块名字"><a href="#快捷使用模块-缩写模块名字" class="headerlink" title="快捷使用模块(缩写模块名字)"></a>快捷使用模块(缩写模块名字)</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> math <span class="token keyword">as</span> m<span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">==</span>math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="模块的实质"><a href="#模块的实质" class="headerlink" title="模块的实质"></a>模块的实质</h2><p>python模块其实就是普通的python文件，可以自己写，然后如上导入即可</p><p>模块的名字就是文件的名字</p><h2 id="列出模块中所有的值"><a href="#列出模块中所有的值" class="headerlink" title="列出模块中所有的值"></a>列出模块中所有的值</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> math<span class="token keyword">print</span><span class="token punctuation">(</span>dir<span class="token punctuation">(</span>math<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># => ['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'comb', 'copysign', 'cos', 'cosh', 'degrees', 'dist', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'gcd', 'hypot', 'inf', 'isclose', 'isfinite', 'isinf', 'isnan', 'isqrt', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'log2', 'modf', 'nan', 'perm', 'pi', 'pow', 'prod', 'radians', 'remainder', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'tau', 'trunc']</span></code></pre><h1 id="7-高级用法"><a href="#7-高级用法" class="headerlink" title="7.高级用法"></a>7.高级用法</h1>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++期末复习</title>
      <link href="2021/01/31/c-qi-mo-fu-xi/"/>
      <url>2021/01/31/c-qi-mo-fu-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="C-复习"><a href="#C-复习" class="headerlink" title="C++复习"></a>C++复习</h2><p>北京邮电大学期末复习考试资料</p><p>适用于北京邮电大学《C++程序设计语言》期末考试</p><ol><li><p>C基础</p><ol><li>面向过程的程序设计语言/结构化程序设计</li><li>结构化数据，结构化语句，数据抽象，过程抽象</li><li>面向<em>过程</em>的程序设计主要思想是<em>自顶向下</em>，逐步求精，模块化</li></ol></li><li><p>C++基础</p><ol><li>自底向上的分析，是从具体到抽象，因为oop(面向对象编程)的第一步是从对象抽象出类</li><li>自顶向下的分析，是从抽象到具体，从大概要处理数据的什么功能细致的规划每一个步骤</li><li>组成C++程序的是<strong>函数</strong></li><li>C++中cin和cout是预定义的<strong>对象</strong>，不属于C++</li><li>通过IDE编写c++源程序文件.cpp</li><li>源文件编译后变为二进制不可执行的文件.obj</li><li>.obj文件通过连接将文件变为可执行的二进制文件.exe</li><li>C语言是一种面向过程的程序设计语言，又被称为结构化程序设计</li><li>翻译程序分为3种：汇编程序，编译程序，解释程序</li></ol></li><li><p>C++基础2</p><ol><li><p>C++不允许初始化时连续赋值，但C可以</p></li><li><pre class=" language-c++"><code class="language-c++">int a=b=c=1;//会报错</code></pre></li></ol></li></ol><ol start="4"><li><p>码制</p><ol><li>八位二进制补码表示的范围：00000000为0，01111111为127，再加1到10000000为-128（<strong>负数的的补码为除符号位取反最后再加1</strong>），10000001为-127，所以八位二进制补码的范围为[-128,127]</li></ol></li><li><p>数据类型</p><ol><li>变量的数据类型定义了变量的取值范围和可以进行的操作</li><li>C++中的class，enum，struct等关键字并不代表一个自定义数据类型，他们用来定义一个自定义数据类型</li></ol></li><li><p>“0”,’\0’,”\0”,’0’的区别</p><ol><li>“0”代表一个字符串，所占内存空间大小为2，一个ascii码为48的0和一个ascii码为0的结束符组成的字符串</li><li>‘\0’代表ascii码为0的结束符</li><li>“\0”代表两个ascii码为0的结束符组成的字符串</li><li>‘0’代表一个ascii码为48的字符</li></ol></li><li><p>标识符不能包含空格和C++字符集中其他的特殊字符</p></li><li><p>基本算术运算符</p><ol><li><p>/，只要有一个操作数是浮点数，则运算结果就是浮点数</p></li><li><p>%，只能对整数运算，结果的正负由被除数决定</p></li><li><pre class=" language-c++"><code class="language-c++">(double)(26/5);//输出结果1.0</code></pre></li></ol></li><li><p>++符运算的位置</p><ol><li><pre class=" language-c++"><code class="language-c++">int x = 1;    while (x++<=8)    &#123;        if (x % 3)            continue;        cout << x;    &#125;//此处++在x和8比较完之后运行，所以x会以9进入循环//结果：369</code></pre></li><li><pre class=" language-c++"><code class="language-c++">    int a = 0;    cout<<(a++&& ++a);    cout << a;//1    cout << (a++ || a);//1//每一个结果单独运行//结果1是先判断a为0，&&不在进行后面的判断，所以只在判断完之后进行了一次++运算//结果2是左侧判断a为0，然后a自增1，到判断右侧的时候，a为1，所以判断结果为1</code></pre></li><li><p><del>所以推测后置++运算符的运算时间是跟其相连的变量进行任意一次操作后自增</del>？</p></li></ol></li><li><p><strong>运算符的优先级</strong></p></li><li><p>一元运算符</p></li><li><p>基础算术运算符</p></li><li><p>关系运算符</p></li><li><p>逻辑运算符</p></li><li><p>三目运算符？：</p></li><li><p>赋值运算符</p></li><li><p>逗号运算符</p><ol><li><pre class=" language-c++"><code class="language-c++">   //no.1   int a=1,b=2.c=3,d=4;   cout<<a+d>c+d?a+b:c<d?a+c:b+d；   //输出4   //解释：a+d为5，c+d为5，>关系运算符结果为0，即对于后面的三目运算符取c<d那一部分，c<d先进行判断，结果为true，取a+c，结果为4   //no.2   double t ;   cout<<(t=1,t+5,t++);   //输出1.0   //解释：t=1对t初始化，t+5并不赋值到t中，如果将此项作为逗号表达式最后一项，则结果为6，但是将t++作为最后一项，完成整个cout操作后t才++，所以输出结果为1，t在释放时值为2   //no.3   int a=2,b=8;   cout<<a+++b;   //被自动调整格式为a++ + b   //no.4   //如何正确表达式子1/abc   cout<<(1.0/a/b/c);</code></pre></li></ol></li></ol><ol start="18"><li><p>控制输入</p><ol><li>cin(提取运算符)以空格和回车作为分割符，不以他们作为输入信息，会忽略但不会终止输入</li><li>cin.get()一个一个字符的读取，可以设置读取到回车或者换行停止读取</li><li>cin.get(字符数组名，接受字符数目)用来接收一行字符串，可以接收空格</li><li>cin.getline()从输入流中提取字符串，，用于获取一行字符串，包含3个参数：<ol><li>字符串的起始地址</li><li>一行中最多输入的字符个数</li><li>约定行输入结束字符</li><li><strong>当第三个参数省略的时候，系统默认为’\n’</strong></li></ol></li></ol></li><li><p>进阶版—–字符数组的输入和输出，对上面的补充</p><ol><li>直接cin输入，接收键盘输入的整个字符串，遇到空格或回车结束</li><li>除了字符数组，其他类型的数组要输出数组元素的值，必须用循环语句一个元素一个元素的输出，而数组名只能代表数组的存储地址</li><li>getline(cin,string对象名称)接收一个字符串，可以接收空格并输出，需包含#include<string>，<strong>只用于string</strong></li></ol></li><li><p><strong>sizeof和strlen</strong></p><ol><li><p>sizeof()返回变量声明后所占的内存数，参数可以是数组，指针，类型，对象，函数</p></li><li><pre class=" language-c++"><code class="language-c++">char *str1="absde";char str2[]="absde";char str3[8]=&#123;'a'&#125;;char ss[] = "0123456789";​输出：​sizeof(str1)=4;//指针的大小，长整型sizeof(str2)=6;//编译时分配的数组空间的大小sizeof(str3)=8;//固定数组的大小sizeof(ss)=11//字符串的大小，字符串长度+1//函数--函数的返回类型所占的空间大小，函数的返回类型不能是void</code></pre></li></ol></li></ol><pre><code>3. strlen（char*c）计算字符串的实际长度，并不包括结束符4. str.length()和str.size()用于求string类对象的成员函数5. sizeof用于求得的字符串长度+16. 对于字符数组，strlen()和sizeof()求得结果相同</code></pre><ol start="21"><li><p>string与C++字符串数组</p><ol><li><p>包含库函数<string></p></li><li><p>string是C++标准库的一个类，定义的string变量其实是这个类的对象</p></li><li><p>将字符串常量存放到string对象中时，只存放字符串本身，不包含’\0‘</p></li><li><pre class=" language-c++"><code class="language-c++">//不必考虑string不包含'\0',对它用sizeof和strlen会怎样string str;getline(cin, str);cout << sizeof(str) << endl;cout << str.length() << endl;//对string对象用sizeof会得到固定值28//无法对string对象使用strlen，这是cstring库中直接对对字符串操作的函数//取而代之是length()和size()</code></pre></li></ol></li><li><p><strong>字符串、字符数组、字符指针</strong></p><ol><li><p>字符串</p><ol><li>系统会为字符串自动添加\0作为结束符，即使已经手动在结尾添加“abc\0”，系统仍会在后面添加’\0’<ol start="2"><li>字符数组名指代一种数据结构，这种数据结构就是数组</li><li>字符数组名是一个<strong>指针常量（即指向不能变）</strong>，其本身不可进行自增自减运算，即不能修改,但是可以<strong>借助其做地址偏移访问数组中元素</strong></li></ol></li></ol></li><li><p>初始化字符数组：</p><ol><li><p>首先分为两种方式：用双引号内的<strong>字符串常量</strong>赋值/用<strong>字符常量</strong>初始化字符数组</p></li><li><p>只能在<strong>定义</strong>的时候直接用字符串赋值</p></li><li><p>用双引号内的字符串初始化字符数组，可以省略大括号，系统自动在数组最后一个元素后补’\0’</p></li><li><p>用字符常量初始化字符数组，（字符数组长度未定）需要自己添加字符串结束符’\0’</p></li><li><p><strong>不加的话，能够成功初始化，但是不能正常输出想输出的内容</strong>，vs报乱码</p></li><li><p>在字符数组长度已知的情况下可以不用添加结束符’\0’,因为系统会把后面所有的部分都补成’\0’（如果字符串长度小于数组长度，则只将字符串中的字符赋给数组中前面的元素，剩下的内存空间系统自动用’\0’填冲</p></li><li><p>可以直接对字符数组名cin，cout</p></li><li><p><strong>在初始化之后不能对字符数组名更改或赋值，字符数组名是不可修改的左值</strong></p></li></ol></li></ol></li><li><p>字符数组的赋值：一个字符一个字符的赋值/使用strcpy(字符数组1，字符数组2)</p><ol><li>不能用赋值语句将一个字符串常量或字符数组直接给字符串赋值</li><li>字符指针<ol><li>可以开辟一个新的内存去更改或重新赋值，但不能在原地址上通过cin修改其指向的值</li><li>即指向可以改，但是不能通过解引用（或cin）改变其指向的值</li></ol></li><li>联系<ol><li><strong>两个字符数组名进行逻辑运算时，实际进行运算的是数组首地址</strong></li><li><strong>两个字符串指针进行逻辑运算时，实际进行运算的也是地址</strong></li><li><u><strong>指向相同字符串常量的指针所含的地址相等，是同一地址</strong></u></li><li>字符指针的输出<ol><li>直接输出指向某种类型的指针输出其地址值</li><li>输出指向字符串的指针时，会输出其内容</li></ol></li><li>字符数组可直接cin，cout，但是不可放在赋值号左边，即为不可修改的左值</li></ol></li></ol></li><li><p>strcpy和memcpy</p><ol><li><p>c的库函数<cstring>strcpy(字符数组1，字符串2或字符指针3或string)</p></li><li><p>其实本质上</p><pre class=" language-c++"><code class="language-c++">char*strcpy(char* dest,const char* src);</code></pre></li><li><p>strcpy只用于字符串复制，还会复制字符串的结束符,并且遇到被复制字符串的结束符’\0’才结束</p></li><li><p>memcpy提供了一般内存的复制，根据第三个参数决定复制的长度</p></li><li><p>本质上为</p><pre class=" language-c++"><code class="language-c++">void* memecpy(void* dest,const void* src,size_t count);</code></pre></li></ol></li><li><p>指针数组与数组指针</p><ol><li><pre class=" language-c++"><code class="language-c++">char *member[10]=&#123;""&#125;;//指针数组，数组元素是某种类型的指针int arr[10]=&#123;0&#125;;int(*p)[10]=&arr;//数组指针，指向数组的指针，指向数组的大小要给出</code></pre></li></ol></li><li><p>iomanip类库</p><ol><li>设置域宽，setw()，只对其后输出的第一个数据有效</li><li>endl不占用setw中设置的域宽，但是’\n’则会占用</li><li>其他操作符一旦设置，对其后的所有输入/输出都产生影响</li><li>setiosflags(ios::left)设置左对齐，默认是右对齐</li><li>setfill(char c)设置其他字符作为填冲</li><li>setprecision(int n)控制小数位数</li></ol></li><li><p><em>循环语句结构的主要部分：循环控制条件，循环体，循环控制变量</em></p></li><li><p>枚举类型</p><ol><li>第一个枚举类型成员的默认值为0，后续成员值依次加一</li><li>随意给枚举元素赋值，之后的值也是依次递加一</li></ol></li><li><p>标识符作用域</p><ol><li>以标识符起作用的范围划分：全局作用域/局部作用域（可以覆盖全局变量）</li><li>局部变量可以隐藏全局变量，如果在有同名全局变量和局部变量的情况下，可以使用域运算符::对全局变量访问</li><li><del>作用域表示符的功能是标识某个成员是属于哪个类的（包括成员函数和成员变量）（指出作用域的范围？）</del></li><li>以标识符在程序中所处的位置来划分：块作用域/函数作用域/类作用域/文件作用域</li></ol></li><li><p>内联函数</p><ol><li>内连函数体不能包含循环语句、switch语句</li><li>内联函数要先定义、后调用，不能先声明内联函数原型，再调用、定义</li><li>编译时插入</li></ol></li><li><p>递归函数</p><ol><li>递归调用指：函数中有直接调用函数自己的语句或通过其它函数间接调用函数自己的语句</li><li>递归函数的组成：更简单参数的递归调用，递归调用结束条件</li></ol></li><li><p>二维数组与指针</p><ol><li><pre class=" language-c++"><code class="language-c++">char s[3][10] = &#123; &#123;"abc"&#125;,&#123;"def"&#125;,&#123;"ghi"&#125; &#125;;    for (int i = 1; i < 3; i++)    &#123;        cout << &s[i][i];    &#125;//输出结果为efi</code></pre><p>对于二维字符数组，取地址输出，其实就跟一维字符数组里直接输出数组名，它输出整个字符串类似，所以这个直接顺着地址向后输出</p><p>注意字符数组和普通数组的输出不一样</p><p>指向一维数组的指针的间接引用结果仍然是地址，数组元素的地址</p></li><li><pre class=" language-c++"><code class="language-c++">int a[][3] = &#123; 1,2,3,4,5,6 &#125;;    int* p = &a[0][0];    int i = 1, j = 1;    cout << a[i][j] << endl;    cout << *(p + 3 * i + j) << endl;    cout << *(&a[0][0] + 3 * i + j) << endl;    cout << *(a[i] + j) << endl;    //cout << p[i][j] << endl;报错信息为：下标要求数组或指针类型//输出结果都为5//第一种是用二维数组的方式访问//第二种和第三种都是将二维数组当成一维数组的存储方式，直接按内存存储的方式加偏移量访问元素//</code></pre></li></ol></li></ol><ol start="33"><li><p>动态申请内存</p><ol><li><p>动态申请内存指针的引用</p></li><li><pre class=" language-c++"><code class="language-c++">clock& hclk=* new clock;delete& hclk;动态申请内存</code></pre></li><li><p>new</p><ol><li>对象数组<ol><li>动态申请对象数组需要使用无参构造函数，不能指定初始值</li><li>但是动态申请对象可以指定初值，也可不指定初值</li><li>对象数组既可以赋初值又可以赋值</li><li>指向对象数组的指针不一定必须指向数组的首元素，指针可以移动（p++）</li></ol></li></ol></li><li><p>delete</p><ol><li>空指针可以delete</li></ol></li></ol></li><li><p>拷贝构造函数</p><ol><li>拷贝构造函数的形参某个对象的引用名</li><li>传值的方式会调用该类的拷贝构造函数，从而造成无穷递归的调用拷贝构造函数，因此拷贝构造函数的参数必须是一个引用</li></ol></li><li><p>特殊成员函数</p><ol><li>静态成员函数<ol><li>加修饰符static</li><li>静态数据成员要在类外进行初始化</li><li>引用静态数据成员时，要在其名称前加&lt;类名&gt;和作用域运算符</li></ol></li></ol></li><li><p>C++建立类族是通过类的继承实现的</p></li><li><p>类的基础函数</p><ol><li>类的作用域是指类定义和对应的成员函数定义的范围，通俗的称为类的内部</li><li>析构函数<ol><li>前面加~只是用于区分构造函数</li><li>析构函数名和类名完全一致是错的！</li><li>析构函数是在对象被撤销时由系统自动调用，执行一些清理动作，不一定是收回分配的内存空间</li><li><strong>只负责清理新定义的成员，只清理堆区不清理栈区成员</strong>，如果没有特殊指针数据成员需要清理，可以使用由系统提供的默认析构函数</li></ol></li><li>构造函数<ol><li>一个类的构造函数必须包含对其子对象的初始化</li><li>无参构造函数包括默认构造函数和带全部默认参数值的函数</li></ol></li><li>拷贝构造函数<ol><li>当用一个对象去初始化同类的另一个对象时</li><li>如果某函数又一个参数是<strong>类a的对象</strong>，(不是类a对象的引用)那么该函数被调用时，类的拷贝构造函数被调用</li><li>如果函数的返回值是类的对象时，那么函数返回时，类的拷贝构造函数将被调用</li></ol></li></ol></li><li><p>多继承情况下的二义性</p><ol><li>解决二义性可以使用虚基类</li><li>也可以使用作用域运算符</li><li>虚函数解决类的多态性，虚基类解决二义性</li></ol></li><li><p>类与结构体</p></li><li><p>类中默认成员访问属性是private</p></li><li><p>对象成员的表示与结构变量成员表示相同，使用运算符.或-&gt;</p></li><li><p>友元函数</p><pre><code>  1. 所谓私有成员是指只有类中所提供的成员函数才能直接使用它们，任何类以外的函数对他们的访问都是非法的。（错误）私有成员还可以被友元访问</code></pre></li><li><p>指针与数组名访问数组</p><ol><li>数组名和下标 a[0],a[4]</li><li>指针和下标 pa[0],pa[4]</li><li>指针加偏移量的解引用 *(pa+1)</li><li>数组加偏移量的解引用 *(a+4)</li><li>指针自加后的间接引用，如*p++,采用这种方式会改变指针本身的值，即改变指针的指向，必要时需要对指针重新初始化</li><li>但是不允许使用数组名自加的间接引用来访问数组元素，如*a++，因为数组名是常数，所以不能通过自加改变自身</li></ol><pre class=" language-c++"><code class="language-c++">int a[] = &#123; 1,2,3,4,5 &#125;;int *p = a+1;cout << (++(*p)) << endl;cout << *(p++) << endl;cout << *p++ << endl;cout << *p << endl;/*输出结果为3334第一个是p指向a[1]，解引用为2再++为3，并且改变了a[1]的值，变为了3（注意区分自增和+1）//错误理解：第二个是p先偏移指向a[2],解引用就为a[2]的值3无论是*p++还是*(p++)都是先解引用再偏移所以第二个是p仍指向a[1],只是此时a[1]为3，再偏移指向a[2]第三个是p先解引用，为a[2]的值3，再偏移指向a[3]所以第四个直接解引用为a[3]的值4*/</code></pre></li><li><p><strong>函数的调用</strong></p><ol><li>函数语句，常用于void类型的函数</li><li>函数表达式，有返回值的函数</li><li>函数参数，函数的嵌套调用</li></ol></li><li><p>函数默认返回类型为int型，因为return默认返回1</p></li><li><p>函数重载</p><ol><li>调用原理：编译器在编译期间根据实参决定选择调用哪一个函数</li><li>作用于同一作用域</li></ol></li><li><p>函数重载与含有默认参数值的函数</p><ol><li>关系：在某些情况下可能会产生二义性，即对于被调用的一个函数，含默认参数值的函数看来是调用自己 ，在函数重载看来，是调用另一个和自身同名的函数名，只是函数参数比一样的函数</li><li>大部分情况下二者无影响</li></ol></li><li><p>同名覆盖</p><ol><li>父类中定义一个(虚)函数，在子类中重新实现了这个函数，并且函数在子类和父类中具有相同的函数原型（函数名、参数列表）</li></ol></li><li><p>函数重载与同名覆盖</p><ol><li>函数重载是同一类中的不同方法，函数覆盖是不同类中的同一方法</li><li>一般情况下，同名覆盖中多个函数的函数名，函数类型，参数等是相同的</li><li>而重载则是多个函数原型（参数）不同</li></ol></li><li><p>变量的存储类型和生存周期</p><ol><li>C++中的变量有数据类型和存储类型</li><li>auto自动变量</li><li>register寄存器变量</li><li>extern用于声明全局变量</li><li>static静态变量</li><li>不同的变量再内存中存在的时间称为变量的生存期<ol><li>不同存储类型的变量其生存期不同：静态生存期变量/动态生存期变量</li><li>动态：auto，register</li><li>静态：全局变量，静态变量</li></ol></li></ol></li><li><p>子对象</p><ol><li><p>当一个类的成员是某一个类的对象时，该对象就为子对象</p><p>自身类对象不可作为类的成员</p><p>在类中出现了子对象或对象成员（另一个类的对象）时，该类的构造函数要包含对子对象的初始化</p></li></ol></li><li><p><strong>派生类构造函数必须对这三类成员进行初始化：</strong></p><ol><li>基类成员函数</li><li>子对象构造函数</li><li>派生类构造函数</li><li>析构函数的调用顺序则恰好相反</li></ol></li><li><p>对象与类</p><ol><li>类是对象的抽象，对象是类的实例</li><li>类是一个自定义数据类型，对象是该数据类型的一个变量</li></ol></li><li><p>继承</p><ol><li>定义新类是通过继承机制实现的</li><li>派生类继承了基类的所有成员，但不包括构造函数，析构函数和默认赋值运算符</li><li>派生类的构造函数要初始化本类的数据成员，还要调用基类的构造函数，并为基类构造函数传递参数</li><li>派生类构造函数的成员初始化列表中，包含：基类的构造函数，派生类中子对象的初始化，派生类中一般数据成员的初始化，不能包含基类中子对象（基类的数据成员）的初始化（这个东西的初始化是通过基类的构造函数）</li><li>对基类数据成员的初始化必须在派生类的初始化列表中执行</li><li>子对象的构造函数调用的顺序是按照类的定义的顺序来的</li></ol></li><li><p>继承方式和访问控制</p><ol><li><p>单独一个类的访问控制权限</p><ol><li>public成员允许被类外的函数访问</li><li>protected成员允许被本类的成员函数或者派生类的成员函数访问</li><li>private成员只能被本类的成员函数访问</li></ol></li><li><p>访问控制</p><ol><li>protected        <ol><li>protected成员不能被本类对象直接访问    </li><li>protected成员不能通过派生类对象直接访问</li><li>protected成员可以被本类成员函数和派生类成员函数访问</li></ol></li><li>public继承的public成员<ol><li>可以派生类对象直接访问</li></ol></li></ol></li><li><p>继承方式</p><ol><li>对于派生类成员函数，无论什么继承方式，其都可以访问基类的public和protected</li><li>public继承，派生类对象只能访问基类public成员</li></ol></li></ol></li><li><p>类与继承编程</p><ol><li><p>可以将字符指针直接赋值给string字符串，需要使用strcpy()才可将字符指针赋给字符数组<cstring>库中</p></li><li><p>对象数组初始化的方法：</p><ol><li>类名 数组名[]={构造函数调用， ， }；</li></ol></li><li><p>调用外部函数时，需要将实参值复制给形参，如果类的数据成员较多，可以使用对象指针或对象引用传递函数参数</p></li><li><p>动态创建一个对象并初始化</p><pre class=" language-c++"><code class="language-c++">clock c1;//clock为类名c1=new clock (形式参数表);</code></pre></li><li><p>经典代码语句：</p><pre class=" language-c++"><code class="language-c++">name=new char [strlen(c)+1];strcpy(name,c);</code></pre></li></ol></li></ol><ol start="57"><li><p>析构与拷贝</p><ol><li>拷贝构造函数的形参一定是对象的引用</li><li>如果外在函数本身带有引用，则不调用类中的拷贝构造函数，并且对于引用不再次析构</li><li>如果外在函数直接传值得话，系统会调用拷贝构造函数，但是会创建对象的副本，这个副本会调用析构函数</li></ol><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;class clock &#123;public:    clock()    &#123;        cout << "构造" << endl;    &#125;    clock(clock& c)    &#123;        cout << "拷贝1" << endl;    &#125;    /*clock(clock c)    &#123;        cout << "拷贝2";    &#125;*/    ~clock()    &#123;        cout << "析构" << endl;    &#125;&#125;;void newclock1(clock c1)&#123;    cout << "函数1" << endl;&#125;void newclock2(clock& c2)&#123;    cout << "函数2" << endl;&#125;int main()&#123;    clock c;    newclock1(c);    newclock2(c);&#125;//输出结果为：构造拷贝1函数1析构函数2析构</code></pre></li><li><p>出现指针的形参能加const就加const</p></li><li><p>指向类数据成员的指针</p><ol><li><p>通过对象来引用指针所指向的成员</p></li><li><p>&lt;类对象名&gt;.*&lt;指向非静态数据成员的指针&gt;</p></li><li><p>&lt;类对象指针&gt;-&gt;*&lt;指向非静态数据成员的指针&gt;</p></li><li><pre class=" language-c++"><code class="language-c++">student s("zhang",100);cout<<s.*ps<<endl;student *pp=new student("wu",99);cout<<pp->*ps<<endl;</code></pre></li></ol></li><li><p>struct的字节对齐问题</p><ol><li><pre class=" language-c++"><code class="language-c++">struct student &#123;    int id;    char name[16];    double score;&#125;;student s1;cout << sizeof(student);cout << &s1.id << endl;cout << &s1.name << endl;cout << &s1.score << endl;/*输出结果为：32003BFA4C003BFA50003BFA64int占了4个字节，然后char占了16个字节，最后double寻址的时候发现16-24被占用了，所以占用了第24-32字节，所以总共占用了32个字节*/</code></pre></li><li><p>double和int这一类的分配内存只针对它自己的字节，char比较特殊，如果结构体中只有单独的char，是补不齐的，char是多长结构体就是多少个字节，但是char和其他类型的都在结构体中就会出现常规意义上的补齐</p></li><li><p>结构体中有double，那么double附近的东西会被补成8个字节空间，最后字节长度会是8的倍数</p></li><li><p>关于short和char，char会被补到2的倍数</p></li></ol></li></ol><p>易错：</p><ol><li><p>手写调用函数时，记得加括号</p></li><li><pre class=" language-c++"><code class="language-c++">//a[i][j]实际上是第i+1行，第j+1列</code></pre></li><li><p>联合和枚举类型定义后要加分号;</p></li></ol><p>借鉴：</p><ol><li>指针指向的不是一个值，而是一个变量，比如++(*p),不仅输出的值加一，p指向的变量也加一</li><li>引用是对变量的直接访问，指针是对变量的间接访问</li><li>在动态申请数组空间时，不可以对数组进行初始化</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/01/11/hello-world/"/>
      <url>2021/01/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="hello-hexo"><a href="#hello-hexo" class="headerlink" title="hello hexo"></a>hello hexo</h2><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
